1. 判断两树是否相同
   力扣 100 -----相同的树
   给定两个二叉树，编写一个函数来检验它们是否相同。
   如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。

   判定两个树相同 ==> 比较根节点是否相同 + 比较左子树是否相同 + 比较右子树是否相同
       1. 如果两棵树都是空树，直接返回 ture
       2. 如果两棵树一个为空，一个不为空，直接返回 false
       3. 如果两棵树都不为空
          a) 比较根节点是否相同，若不相同，就直接返回 false
          b) 再递归比较左子树和右子树

2. 另一棵树的子树 ----- 力扣 572
   给定两个非空二叉树 s 和 t，检验 s 中是否包含和 t 具有相同结构和节点值的子树。
   s 的一个子树包括 s 的一个节点和这个节点的所有子孙。s 也可以看做它自身的一棵子树。

   比较 s 是否包含 t
   和 t 是不是相等 + s.left 是不是包含 t + s.right 是不是包含 t
      1. 如果两个树都是空树，直接返回 true
      2. 如果一个树为空，一个不为空，false
      3. 如果两个树都非空
         a） 比较根节点的值是不是相等，如果相等的话，比较一下 s 和 t 是不是相同的树，如果是相同的树，就认为是包含的；
         b） 递归判定，t 是否被 s 的左子树包含
         c)  递归判定，t 是否被 s 的右子树包含

3. 力扣104 ----- 二叉树的最大深度
   给定一个二叉树，找出其最大深度。
   二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。
   说明:?叶子节点是指没有子节点的节点。
   
   递归
   root 的深度 ==> 1 + 左子树的深度 和 右子树的深度 的最大值
   1. 如果是空树，深度就是 0
   2. 如果只有一个根节点，没有左右子树，深度就是 1
   3. 1 + max (左子树的深度， 右子树的深度)